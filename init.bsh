#! /bin/bash  -w

##       2021-11-09       script to install MariaDB 10.5 including the ssl shit



IP_NBR='192.168.123.190'                ;
DB_NAME='Marky'                         ;
DB_USER='Marky'                         ;
DB_PASS='Marky'                         ;

export SSL_DIR='/etc/mysql/ssl/'        ;

MARIADB_CNF='/etc/my.cnf.d/server.cnf'  ;

dnf --assumeyes update  ;

dnf --assumeyes  install expect ;


##  https://computingforgeeks.com/install-mariadb-on-centos-7-centos-8/

curl -LsS -O https://downloads.mariadb.com/MariaDB/mariadb_repo_setup  ;

bash mariadb_repo_setup --mariadb-server-version=10.5 ;

dnf --assumeyes install MariaDB-server MariaDB-client MariaDB-backup ;

systemctl start mariadb.service  ;
systemctl enable mariadb.service  ;



mariadb --verbose  <<END   ;

    ## from http://edwardsmark.com/php/createDb.php?dbName=Marky&&&dbUser=Marky

    DROP USER IF EXISTS '${DB_USER}'@'${IP_NBR}'                                     ;

    CREATE USER '${DB_USER}'@'${IP_NBR}' IDENTIFIED BY '${DB_PASS}'                  ;

    GRANT ALL ON \`${DB_NAME}\`.* TO '${DB_USER}'@'${IP_NBR}'                        \
    IDENTIFIED BY '${DB_PASS}' WITH MAX_QUERIES_PER_HOUR 0                           \
    MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0         ;

    # DROP DATABASE \`${DB_NAME}\`                                                   ;
    CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\`                                     ;

    GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.* TO '${DB_USER}'@'${IP_NBR}'             ;

    # mysql  --host=${IP_NBR} --user=${DB_USER}  --password=${DB_PASS}    ${DB_NAME} ;

END


## networking!

##   https://www.cyberciti.biz/faq/how-to-setup-mariadb-ssl-and-secure-connections-from-clients/

##   https://stackoverflow.com/questions/19726138/openssl-error-18-at-0-depth-lookupself-signed-certificate
        ## be SURE "Common names" are different!


systemctl  stop  firewalld.service ;

mkdir --verbose --parent ${SSL_DIR} ;

openssl genrsa 2048    >     ${SSL_DIR}/ca-key.pem      ;

expect <(cat <<'END'
        ##      creates a service:      messages  (all the defaults)
        ##      written from:   https://docs.feathersjs.com/guides/chat/service.html

        set timeout -1

        set UPARROW     \x1B\[A;
        set DOWNARROW   \x1B\[B;
        set SPACE       \x20;
        set RETURN      \x0d;
                
        #spawn   openssl req -new -x509 -nodes -days 365000 -key $ENV('SSL_DIR')/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem ;
        spawn   openssl req -new -x509 -nodes -days 365000 -key $env(SSL_DIR)/ca-key.pem -out $env(SSL_DIR)/ca-cert.pem ;


        expect  -exact "Country Name (2 letter code) \[XX]:"
        send    -- "${RETURN}"

        expect  -exact "State or Province Name (full name) \[]:"
        send    -- "${RETURN}"

        expect  -exact "Locality Name (eg, city) \[Default City]:"
        send    -- "${RETURN}"

        expect  -exact "Organization Name (eg, company) \[Default Company Ltd]:"
        send    -- "${RETURN}"

        expect  -exact "Organizational Unit Name (eg, section) \[]:"
        send    -- "${RETURN}"

        expect  -exact "Common Name (eg, your name or your server's hostname) \[]:"
        send    -- "One${RETURN}"

        expect  -exact "Email Address \[]:"
        send    -- "${RETURN}"

        expect eof
END
)       ## end of expect


###
expect <(cat <<'END'
        ##      creates a service:      messages  (all the defaults)
        ##      written from:   https://docs.feathersjs.com/guides/chat/service.html

        set timeout -1

        set UPARROW     \x1B\[A;
        set DOWNARROW   \x1B\[B;
        set SPACE       \x20;
        set RETURN      \x0d;
                
        ##spawn   openssl req -newkey rsa:2048 -days 365000 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem  ;
        spawn   openssl req -newkey rsa:2048 -days 365000 -nodes -keyout  $env(SSL_DIR)/server-key.pem -out  $env(SSL_DIR)/server-req.pem  ;


        expect  -exact "Country Name (2 letter code) \[XX]:"
        send    -- "${RETURN}"

        expect  -exact "State or Province Name (full name) \[]:"
        send    -- "${RETURN}"

        expect  -exact "Locality Name (eg, city) \[Default City]:"
        send    -- "${RETURN}"

        expect  -exact "Organization Name (eg, company) \[Default Company Ltd]:"
        send    -- "${RETURN}"

        expect  -exact "Organizational Unit Name (eg, section) \[]:"
        send    -- "${RETURN}"

        expect  -exact "Common Name (eg, your name or your server's hostname) \[]:"
        send    -- "Two${RETURN}"

        expect  -exact "Email Address \[]:"
        send    -- "${RETURN}"

        expect  -regex ".*A challenge password.*"
        send    -- "${RETURN}"
        
        expect  -regex ".*An optional company name.*"
        send    -- "${RETURN}"

        expect eof
END
)       ## end of expect

##openssl rsa -in ${SSL_DIR}/server-key.pem -out /etc/mysql/ssl/server-key.pem  ;
openssl rsa -in ${SSL_DIR}/server-key.pem -out ${SSL_DIR}/server-key.pem  ;

openssl x509 -req -in ${SSL_DIR}/server-req.pem -days 365000 -CA ${SSL_DIR}/ca-cert.pem -CAkey ${SSL_DIR}/ca-key.pem -set_serial 01 -out ${SSL_DIR}/server-cert.pem  ;
openssl verify -CAfile ${SSL_DIR}/ca-cert.pem ${SSL_DIR}/server-cert.pem  ;

chmod  --verbose 755   ${SSL_DIR}/*.pem ;

cat >> ${MARIADB_CNF}  <<END  ;
ssl-ca=${SSL_DIR}/ca-cert.pem
ssl-cert=${SSL_DIR}/server-cert.pem
ssl-key=${SSL_DIR}ssl/server-key.pem
END

tail -10   ${MARIADB_CNF}  ;

systemctl stop    mariadb.service  ;
systemctl start   mariadb.service  ;
systemctl status  mariadb.service  ;



mariadb --verbose  <<END   ;

    SHOW VARIABLES LIKE '%ssl%';

    status ;

END

exit;

#
